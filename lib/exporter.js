"use strict";exports.__esModule=true;exports.MeshExporter=void 0;var _jszip=_interopRequireDefault(require("jszip"));var _OBJParser=require("./OBJ-parser");var _STLParser=require("./STL-parser");var _validator=require("@oneisland/validator");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const{validate}=new _validator.Validator("MeshExporter");class MeshExporter{constructor(filepath=""){validate({filepath},"String");this.filepath=filepath;if(this.filepath.indexOf(".zip")!=this.filepath.length-4)this.filepath+=".zip";this.zip=new _jszip.default}addMeshes(meshes){for(const key of Object.keys(meshes)){if(meshes[key].species=="Mesh"){this.addMesh(meshes[key]);continue}const folder=this.zip.folder(key);for(const mesh of meshes[key]){this.addMesh(mesh,folder)}}return this}addMesh(mesh,folder=this.zip){validate({mesh},"Mesh");validate({folder},()=>folder&&folder.file,`"folder" to be a valid ZIP directory`);const OBJ=new _OBJParser.OBJParser(mesh,true);folder.file(OBJ.filename,OBJ.content);const STL=new _STLParser.STLParser(mesh);folder.file(STL.filename,STL.content);return this}async save(){return new Promise(resolve=>{if(process.env){try{const fs=require("fs");const path=require("path");const buffer=this.zip.generateNodeStream({type:"nodebuffer",streamFiles:true});const pipe=buffer.pipe(fs.createWriteStream(path.resolve(process.cwd(),this.filepath)));pipe.on("finish",()=>resolve())}catch(e){}}else{this.zip.generateAsync({type:"blob"}).then(content=>{const button=document.createElement("a");button.href=window.URL.createObjectURL(content);button.download=this.filepath;button.click();resolve()})}})}}exports.MeshExporter=MeshExporter;
//# sourceMappingURL=exporter.js.map