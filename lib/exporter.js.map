{"version":3,"sources":["../src/exporter.js"],"names":["validate","Validator","MeshExporter","constructor","filepath","indexOf","length","zip","JSZip","addMeshes","meshes","key","Object","keys","species","addMesh","folder","mesh","file","OBJ","OBJParser","filename","content","STL","STLParser","save","Promise","resolve","process","env","fs","require","path","buffer","generateNodeStream","type","streamFiles","pipe","createWriteStream","cwd","on","e","generateAsync","then","button","document","createElement","href","window","URL","createObjectURL","download","click"],"mappings":"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","sourcesContent":["// Import the jszip package\nimport JSZip from 'jszip';\n\n// Import the mesh parsers\nimport { OBJParser } from './OBJ-parser';\nimport { STLParser } from './STL-parser';\n\n// Import the validator package\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('MeshExporter');\n\n// Create an exporter for exporting the meshes\nexport class MeshExporter {\n\n  // Define the constructor\n  constructor(filepath = '') {\n\n    // Throw an error if filepath is not a String\n    validate({ filepath }, 'String');\n\n    // Define the filepath of the archive\n    this.filepath = filepath;\n\n    // Add the file extension if it does not exist\n    if (this.filepath.indexOf('.zip') != (this.filepath.length - 4)) this.filepath += '.zip';\n\n    // Define the zip archive\n    this.zip = new JSZip();\n  }\n\n  // Add each of the meshes in an array\n  addMeshes(meshes) {\n\n    // Iterate through each of the lists of meshes\n    for (const key of Object.keys(meshes)) {\n\n      // Check if the meshes is a single mesh\n      if (meshes[key].species == 'Mesh') {\n\n        // Add the mesh to the zip\n        this.addMesh(meshes[key]);\n\n        // Continue to the next list of meshes\n        continue;\n      }\n\n      // Add the folder to the zip\n      const folder = this.zip.folder(key);\n\n      // Iterate through each of the meshes for the key\n      for (const mesh of meshes[key]) {\n\n        // Add the mesh to the folder\n        this.addMesh(mesh, folder);\n      }\n    }\n\n    // Return the exporter\n    return this;\n  }\n\n  // Add a mesh to the archive\n  addMesh(mesh, folder = this.zip) {\n\n    // Throw an error if mesh is not a Mesh\n    validate({ mesh }, 'Mesh');\n\n    // Throw an error if folder is not a folder\n    validate({ folder }, () => (folder && folder.file), `\"folder\" to be a valid ZIP directory`);\n\n    // Parse the mesh to an .obj\n    const OBJ = new OBJParser(mesh, true);\n\n    // Add the .obj to the folder\n    folder.file(OBJ.filename, OBJ.content);\n\n    // Parse the mesh to an .stl\n    const STL = new STLParser(mesh);\n\n    // Add the .stl to the folder\n    folder.file(STL.filename, STL.content);\n\n    // Return the exporter\n    return this;\n  }\n\n  // Export the zip to a file\n  async save() {\n\n    // Generate a new promise and return it\n    return new Promise(resolve => {\n\n      // Check for the process.env flag (node environments)\n      if (process.env) {\n\n        // Attempt to save the file using nodejs\n        try {\n\n          // Import the node fs and path modules\n          const fs = require('fs');\n          const path = require('path');\n\n          // / Create a buffer with the zip conentent\n          const buffer = this.zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true });\n\n          // Pipe the files to a file using fs\n          const pipe = buffer.pipe(fs.createWriteStream(path.resolve(process.cwd(), this.filepath)));\n\n          // Resolve the promise\n          pipe.on('finish', () => resolve());\n\n        } catch (e) {\n\n          // Do nothing with the error\n        }\n\n      // Running from the browser  \n      } else {\n\n        // Generate the zip archive as a blob\n        this.zip.generateAsync({ type: 'blob' }).then((content) => {\n\n          // Create a download button\n          const button = document.createElement('a');\n\n          // Add the link to the blob\n          button.href = window.URL.createObjectURL(content);\n          \n          // Add the filename to the button\n          button.download = this.filepath;\n\n          // Click the button / download the file\n          button.click();\n\n          // Resolve the promise\n          resolve();\n        });\n      }\n    });\n  }\n}"],"file":"exporter.js"}