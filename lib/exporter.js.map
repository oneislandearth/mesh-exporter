{"version":3,"sources":["../src/exporter.js"],"names":["validate","Validator","MeshExporter","constructor","filename","filepath","zip","JSZip","addMeshes","meshes","key","Object","keys","folder","mesh","OBJ","OBJParser","file","content","STL","STLParser","save","fs","require","path","buffer","generateNodeStream","type","streamFiles","pipe","createWriteStream","resolve","process","cwd","e","generateAsync","then","button","document","createElement","href","window","URL","createObjectURL","download","click"],"mappings":"iEACA,oDAGA,uCACA,uCAGA,+C,kFAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,cAAd,CAArB,CAGO,KAAMC,CAAAA,YAAa,CAGxBC,WAAW,CAACC,QAAD,CAAWC,QAAQ,CAAG,EAAtB,CAA0B,CAGnCL,QAAQ,CAAC,CAAEI,QAAF,CAAD,CAAe,QAAf,CAAR,CAGA,KAAKA,QAAL,CAAiB,GAAEA,QAAS,MAA5B,CAGA,KAAKC,QAAL,CAAgBA,QAAhB,CAGA,KAAKC,GAAL,CAAW,GAAIC,eAChB,CAGDC,SAAS,CAACC,MAAD,CAAS,CAGhB,IAAK,KAAMC,CAAAA,GAAX,GAAkBC,CAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAlB,CAAuC,CAGrC,KAAMI,CAAAA,MAAM,CAAG,KAAKP,GAAL,CAASO,MAAT,CAAgBH,GAAhB,CAAf,CAGA,IAAK,KAAMI,CAAAA,IAAX,GAAmBL,CAAAA,MAAM,CAACC,GAAD,CAAzB,CAAgC,CAG9B,KAAMK,CAAAA,GAAG,CAAG,GAAIC,qBAAJ,CAAcF,IAAd,CAAoB,IAApB,CAAZ,CAGAD,MAAM,CAACI,IAAP,CAAYF,GAAG,CAACX,QAAhB,CAA0BW,GAAG,CAACG,OAA9B,EAGA,KAAMC,CAAAA,GAAG,CAAG,GAAIC,qBAAJ,CAAcN,IAAd,CAAZ,CAGAD,MAAM,CAACI,IAAP,CAAYE,GAAG,CAACf,QAAhB,CAA0Be,GAAG,CAACD,OAA9B,CACD,CACF,CACF,CAGDG,IAAI,EAAG,CAGL,GAAI,CAGF,KAAMC,CAAAA,EAAE,CAAGC,OAAO,MAAlB,CACA,KAAMC,CAAAA,IAAI,CAAGD,OAAO,QAApB,CAGA,KAAME,CAAAA,MAAM,CAAG,KAAKnB,GAAL,CAASoB,kBAAT,CAA4B,CAAEC,IAAI,CAAE,YAAR,CAAsBC,WAAW,CAAE,IAAnC,CAA5B,CAAf,CAGAH,MAAM,CAACI,IAAP,CAAYP,EAAE,CAACQ,iBAAH,CAAqBN,IAAI,CAACO,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,CAA4B,KAAK5B,QAAjC,CAA2C,KAAKD,QAAhD,CAArB,CAAZ,CAGD,CAAC,MAAO8B,CAAP,CAAU,CAGV,KAAK5B,GAAL,CAAS6B,aAAT,CAAuB,CAAER,IAAI,CAAE,MAAR,CAAvB,EAAyCS,IAAzC,CAA+ClB,OAAD,EAAa,CAGzD,KAAMmB,CAAAA,MAAM,CAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAf,CAGAF,MAAM,CAACG,IAAP,CAAcC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BzB,OAA3B,CAAd,CAGAmB,MAAM,CAACO,QAAP,CAAkB,KAAKxC,QAAvB,CAGAiC,MAAM,CAACQ,KAAP,EACD,CAbD,CAcD,CAEF,CAjFuB,C","sourcesContent":["// Import the jszip package\nimport JSZip from 'jszip';\n\n// Import the mesh parsers\nimport { OBJParser } from './OBJ-parser';\nimport { STLParser } from './STL-parser';\n\n// Import the validator package\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('MeshExporter');\n\n// Create an exporter for exporting the meshes\nexport class MeshExporter {\n\n  // Define the constructor\n  constructor(filename, filepath = '') {\n\n    // Throw an error if filename value is not a String\n    validate({ filename }, 'String');\n\n    // Define the filename of the archive\n    this.filename = `${filename}.zip`;\n\n    // Add the filepath (node / fs only)\n    this.filepath = filepath;\n\n    // Define the zip archive\n    this.zip = new JSZip();\n  }\n\n  // Add each of the meshes in an array\n  addMeshes(meshes) {\n\n    // Iterate through each of the lists of meshes\n    for (const key of Object.keys(meshes)) {\n\n      // Add the folder to the zip\n      const folder = this.zip.folder(key);\n\n      // Iterate through each of the meshes for the key\n      for (const mesh of meshes[key]) {\n\n        // Parse the mesh to an .obj\n        const OBJ = new OBJParser(mesh, true);\n\n        // Add the .obj to the folder\n        folder.file(OBJ.filename, OBJ.content);\n\n        // Parse the mesh to an .stl\n        const STL = new STLParser(mesh);\n\n        // Add the .stl to the folder\n        folder.file(STL.filename, STL.content);\n      }\n    }\n  }\n\n  // Export the zip to a file\n  save() {\n\n    // Attempt to save the file using nodejs\n    try {\n\n      // Import the node fs and path modules\n      const fs = require('fs');\n      const path = require('path');\n\n      // / Create a buffer with the zip conentent\n      const buffer = this.zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true });\n\n      // Pipe the files to a file using fs\n      buffer.pipe(fs.createWriteStream(path.resolve(process.cwd(), this.filepath, this.filename)));\n\n    // Running from the browser  \n    } catch (e) {\n\n      // Generate the zip archive as a blob\n      this.zip.generateAsync({ type: 'blob' }).then((content) => {\n\n        // Create a download button\n        const button = document.createElement('a');\n\n        // Add the link to the blob\n        button.href = window.URL.createObjectURL(content);\n        \n        // Add the filename to the button\n        button.download = this.filename;\n\n        // Click the button / download the file\n        button.click();\n      });\n    }\n\n  }\n}"],"file":"exporter.js"}