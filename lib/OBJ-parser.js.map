{"version":3,"sources":["../src/OBJ-parser.js"],"names":["validate","Validator","OBJParser","constructor","mesh","normals","name","label","replace","Date","now","content","vertex","vertices","x","y","z","xn","yn","zn","normal","face","faces","a","b","c","map","i","filename"],"mappings":"8DACA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,WAAd,CAArB,CAGO,KAAMC,CAAAA,SAAU,CAGrBC,WAAW,CAACC,IAAD,CAAOC,OAAO,CAAG,KAAjB,CAAwB,CAGjCL,QAAQ,CAAC,CAAEI,IAAF,CAAD,CAAW,MAAX,CAAR,CAGA,KAAME,CAAAA,IAAI,CAAIF,IAAI,CAACG,KAAN,CAAeH,IAAI,CAACG,KAAL,CAAWC,OAAX,CAAmB,OAAnB,CAA4B,GAA5B,CAAf,CAAmD,QAAOC,IAAI,CAACC,GAAL,EAAW,EAAlF,CAGA,GAAIC,CAAAA,OAAO,CAAI,uBAAsBL,IAAK,OAAMA,IAAK,IAArD,CAGA,IAAK,KAAMM,CAAAA,MAAX,GAAqBR,CAAAA,IAAI,CAACS,QAA1B,CAAoC,CAGlC,KAAM,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,EAAYJ,MAAlB,CAGAD,OAAO,EAAK,KAAIG,CAAE,IAAGC,CAAE,IAAGC,CAAE,IAA5B,CAGA,GAAIX,OAAJ,CAAa,CAGX,KAAM,CAACY,EAAD,CAAKC,EAAL,CAASC,EAAT,EAAeP,MAAM,CAACQ,MAA5B,CAGAT,OAAO,EAAK,MAAKM,EAAG,IAAGC,EAAG,IAAGC,EAAG,IACjC,CACF,CAGD,IAAK,KAAME,CAAAA,IAAX,GAAmBjB,CAAAA,IAAI,CAACkB,KAAxB,CAA+B,CAG7B,KAAM,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,EAAYJ,IAAI,CAACK,GAAL,CAASC,CAAC,EAAKA,CAAC,CAAG,CAAnB,CAAlB,CAGA,GAAItB,OAAJ,CAAa,CAGXM,OAAO,EAAK,KAAIY,CAAE,KAAIA,CAAE,IAAGC,CAAE,KAAIA,CAAE,IAAGC,CAAE,KAAIA,CAAE,IAE/C,CALD,IAKO,CAGLd,OAAO,EAAK,KAAIY,CAAE,IAAGC,CAAE,IAAGC,CAAE,IAC7B,CACF,CAGD,MAAO,CACLG,QAAQ,CAAG,GAAEtB,IAAK,MADb,CAELK,OAFK,CAIR,CA1DoB,C","sourcesContent":["// Import the validator package\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('OBJParser');\n \n// Transforms a mesh into a .obj data set\nexport class OBJParser {\n  \n  // Parse a mesh into the required format for an .obj file\n  constructor(mesh, normals = false) {\n\n    // Throw an error if mesh value is not a Mesh\n    validate({ mesh }, 'Mesh');\n\n    // Determine the name of the mesh\n    const name = (mesh.label) ? mesh.label.replace(/( )/ig, '_') : `Mesh_${Date.now()}`;\n\n    // Create a string for the output\n    let content = `# Scale = meters\\ng ${name}\\no ${name}\\n`;\n\n    // Iterate through each of the vertices\n    for (const vertex of mesh.vertices) {\n\n      // Extract the vertex components\n      const [x, y, z] = vertex;\n\n      // Add the vertex to the output (6dp)\n      content += `v ${x} ${y} ${z}\\n`;\n\n      // Check if normals are to be added\n      if (normals) {\n\n        // Extract the vertex normal components\n        const [xn, yn, zn] = vertex.normal;\n\n        // Add the vertex normals to the output (6dp)\n        content += `vn ${xn} ${yn} ${zn}\\n`;\n      }\n    }\n\n    // Iterate through each of the faces\n    for (const face of mesh.faces) {\n\n      // Extract each of the indices (+1)\n      const [a, b, c] = face.map(i => (i + 1));\n\n      // Check if normals are to be added\n      if (normals) {\n\n        // Add the face vertices with normals to the output\n        content += `f ${a}//${a} ${b}//${b} ${c}//${c}\\n`;\n\n      } else {\n\n        // Add the face vertices to the output\n        content += `f ${a} ${b} ${c}\\n`;\n      }\n    }\n      \n    // Return the name and content\n    return {\n      filename: `${name}.obj`,\n      content\n    };\n  }\n}"],"file":"OBJ-parser.js"}