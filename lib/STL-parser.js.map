{"version":3,"sources":["../src/STL-parser.js"],"names":["validate","Validator","STLParser","constructor","mesh","name","label","replace","Date","now","content","face","faces","xn","yn","zn","normal","x","y","z","vertices","filename"],"mappings":"8DACA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,WAAd,CAArB,CAGO,KAAMC,CAAAA,SAAU,CAGrBC,WAAW,CAACC,IAAD,CAAO,CAGhBJ,QAAQ,CAAC,CAAEI,IAAF,CAAD,CAAW,MAAX,CAAR,CAGA,KAAMC,CAAAA,IAAI,CAAID,IAAI,CAACE,KAAN,CAAeF,IAAI,CAACE,KAAL,CAAWC,OAAX,CAAmB,OAAnB,CAA4B,GAA5B,CAAf,CAAmD,QAAOC,IAAI,CAACC,GAAL,EAAW,EAAlF,CAGA,GAAIC,CAAAA,OAAO,CAAI,SAAQL,IAAK,IAA5B,CAUA,IAAK,KAAMM,CAAAA,IAAX,GAAmBP,CAAAA,IAAI,CAACQ,KAAxB,CAA+B,CAG7B,KAAM,CAACC,EAAD,CAAKC,EAAL,CAASC,EAAT,EAAeJ,IAAI,CAACK,MAA1B,CAGAN,OAAO,EAAK,gBAAeG,EAAG,IAAGC,EAAG,IAAGC,EAAG,IAA1C,CAGAL,OAAO,EAAK,gBAAZ,CAGA,IAAK,KAAM,CAACO,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAX,EAAwBR,CAAAA,IAAI,CAACS,QAA7B,CAAuC,CAGrCV,OAAO,EAAK,cAAaO,CAAE,IAAGC,CAAE,IAAGC,CAAE,IACtC,CAGDT,OAAO,EAAK,uBACb,CAGDA,OAAO,EAAK,YAAWL,IAAK,IAA5B,CAGA,MAAO,CACLgB,QAAQ,CAAG,GAAEhB,IAAK,MADb,CAELK,OAFK,CAIR,CApDoB,C","sourcesContent":["// Import the validator package\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('STLParser');\n \n// Transforms a mesh into a .stl data set\nexport class STLParser {\n  \n  // Parse a mesh into the required format for an .stl file\n  constructor(mesh) {\n\n    // Throw an error if mesh value is not a Mesh\n    validate({ mesh }, 'Mesh');\n\n    // Determine the name of the mesh\n    const name = (mesh.label) ? mesh.label.replace(/( )/ig, '_') : `Mesh_${Date.now()}`;\n\n    // Create a string for the output\n    let content = `solid ${name}\\n`;\n\n    // // Round all the vertex values to 5dp\n    // for (let i = 0; i < mesh.vertices.length; i++) {\n    //   mesh.vertices[i][0] = mesh.vertices[i][0].toFixed(5);\n    //   mesh.vertices[i][1] = mesh.vertices[i][1].toFixed(5);\n    //   mesh.vertices[i][2] = mesh.vertices[i][2].toFixed(5);\n    // }\n\n    // Iterate through each of the faces\n    for (const face of mesh.faces) {\n\n      // Extract the face normal values\n      const [xn, yn, zn] = face.normal;\n\n      // Add the facet normals\n      content += `facet normal ${xn} ${yn} ${zn}\\n`;\n\n      // Begin the outer loop (1 tab)\n      content += `\\touter loop\\n`;\n\n      // Iterate through each of the vertices in the face\n      for (const [x, y, z] of face.vertices) {\n\n        // Add the vertices (2 tabs)\n        content += `\\t\\tvertex ${x} ${y} ${z}\\n`;\n      }\n\n      // Close the outer loop and facet (1 tab)\n      content += `\\tendloop\\nendfacet\\n`;\n    }\n\n    // End the shape\n    content += `endsolid ${name}\\n`;\n      \n    // Return the name and content\n    return {\n      filename: `${name}.stl`,\n      content\n    };\n  }\n}"],"file":"STL-parser.js"}